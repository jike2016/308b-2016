{
  "name": "pkcs7",
  "version": "0.2.3",
  "main": "lib/pkcs7.js",
  "description": "Add and remove pkcs7-style padding.",
  "homepage": "https://github.com/brightcove/pkcs7",
  "bugs": {
    "url": "https://github.com/brightcove/pkcs7/issues"
  },
  "engines": {
    "npm": "^1.4.6",
    "node": "^0.10"
  },
  "author": {
    "name": "Brightcove"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/brightcove/pkcs7"
  },
  "license": "Apache2",
  "files": [
    "lib",
    "dist"
  ],
  "keywords": [
    "pkcs7",
    "pkcs7 encrypt decrypt padding pkcs"
  ],
  "devDependencies": {
    "grunt-browserify": "^2.1.4",
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-contrib-nodeunit": "^0.3.3",
    "grunt-contrib-watch": "^0.6.1",
    "jshint-stylish": "^0.2.0",
    "load-grunt-tasks": "^0.4.0",
    "time-grunt": "^0.3.1"
  },
  "scripts": {
    "test": "grunt"
  },
  "bin": {
    "pkcs7": "lib/cli.js"
  },
  "readme": "# pkcs7 [![Build Status](https://secure.travis-ci.org/brightcove/pkcs7.png?branch=master)](http://travis-ci.org/brightcove/pkcs7)\n\n> Add and remove pkcs7-style padding.\n\n\n## Getting Started\n\nInstall the module with: `npm install pkcs7`\n\n```js\nvar pkcs7 = require('pkcs7'), encrypted;\n// pad a buffer!\nenctcrypted = encrypt(pkcs7.pad(buffer));\n\n// later, you can unpad it:\nconsole.log('the secret is out! ' + pkcs7.unpad(decrypt(encrypted)));\n```\n\nInstall with cli command\n\n```sh\n$ npm install -g pkcs7\n$ pkcs7 --help\n$ pkcs7 --version\n```\n\n## Documentation\n\nPKCS#7 padding a really simple transformation some crytographic algorithms use to ensure the number of input bytes is a multiple of some constant. Here's how it works:\n\n             01 -- if lth mod k = k-1\n          02 02 -- if lth mod k = k-2\n              .\n              .\n              .\n    k k ... k k -- if lth mod k = 0\n\n`k` is the constant value the encryption algorithm wants your input to be a multiple of. This project assumes `k` is *always* sixteen. Not much to it, right? If reading specs is your thing, check out [RFC 5652](http://tools.ietf.org/html/rfc5652).\n\n\n## Examples\n\nYou can run pkcs7 from the command line:\n\n```shell\n# pad a string generated by echo and the hex dump the result\necho -n \"0123456789AB\" | pkcs7 | xxd\n```\n\n## Contributing\n\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com).\n\n\n## License\n\nCopyright (c) 2014 Brightcove  \nLicensed under the Apache-2 license.\n",
  "readmeFilename": "README.md",
  "_id": "pkcs7@0.2.3",
  "dist": {
    "shasum": "fbd9e37004208060a45a957f53b56cb6ac0a037b"
  },
  "_from": "pkcs7@^0.2.3",
  "_resolved": "https://registry.npmjs.org/pkcs7/-/pkcs7-0.2.3.tgz"
}

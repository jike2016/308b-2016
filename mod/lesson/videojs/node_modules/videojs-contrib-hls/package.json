{
  "name": "videojs-contrib-hls",
  "version": "3.4.0",
  "description": "Play back HLS with video.js, even where it's not natively supported",
  "main": "es5/videojs-contrib-hls.js",
  "engines": {
    "node": ">= 0.10.12"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:videojs/videojs-contrib-hls.git"
  },
  "scripts": {
    "prebuild": "npm run clean",
    "build": "npm-run-all -p build:*",
    "build:js": "npm-run-all build:js:babel build:js:browserify build:js:bannerize build:js:uglify",
    "build:js:babel": "babel src -d es5",
    "build:js:bannerize": "bannerize dist/videojs-contrib-hls.js --banner=scripts/banner.ejs",
    "build:js:browserify": "browserify . -s videojs-contrib-hls -g browserify-shim -o dist/videojs-contrib-hls.js",
    "build:js:uglify": "uglifyjs dist/videojs-contrib-hls.js --comments --mangle --compress -o dist/videojs-contrib-hls.min.js",
    "build:test": "npm-run-all build:test:manifest build:test:js",
    "build:test:js": "node scripts/build-test.js",
    "build:test:manifest": "node -e \"var b=require('./scripts/manifest-data.js'); b.build();\"",
    "clean": "npm-run-all -p clean:*",
    "clean:build": "node -e \"var s=require('shelljs'),d=['dist','dist-test','es5'];s.rm('-rf',d);s.mkdir('-p',d);\"",
    "clean:test": "node -e \"var b=require('./scripts/manifest-data.js'); b.clean();\"",
    "docs": "npm-run-all docs:*",
    "docs:api": "jsdoc src -r -d docs/api",
    "docs:toc": "doctoc README.md",
    "lint": "vjsstandard",
    "start": "npm-run-all -p watch start:*",
    "start:serve": "babel-node scripts/server.js",
    "pretest": "npm-run-all lint build",
    "test": "karma start test/karma/detected.js",
    "test:chrome": "npm run pretest && karma start test/karma/chrome.js",
    "test:firefox": "npm run pretest && karma start test/karma/firefox.js",
    "test:ie": "npm run pretest && karma start test/karma/ie.js",
    "test:safari": "npm run pretest && karma start test/karma/safari.js",
    "preversion": "npm test",
    "version": "npm run build",
    "watch": "npm-run-all -p watch:*",
    "watch:docs": "nodemon --watch src/ --exec npm run docs",
    "watch:js": "npm-run-all -p watch:js:babel watch:js:browserify watch:js:switcher",
    "watch:js:babel": "npm run build:js:babel -- --watch",
    "watch:js:browserify": "watchify . -v -g browserify-shim -o dist/videojs-contrib-hls.js",
    "watch:js:switcher": "watchify utils/switcher/switcher.js -v -t babelify -g browserify-shim -o dist/switcher.js",
    "watch:test": "npm-run-all -p watch:test:*",
    "watch:test:js": "node scripts/watch-test.js",
    "watch:test:manifest": "node -e \"var b=require('./scripts/manifest-data.js'); b.watch();\"",
    "prepublish": "npm run build"
  },
  "keywords": [
    "videojs",
    "videojs-plugin"
  ],
  "author": {
    "name": "Brightcove, Inc"
  },
  "license": "Apache-2.0",
  "browserify-shim": {
    "qunit": "global:QUnit",
    "sinon": "global:sinon",
    "video.js": "global:videojs"
  },
  "vjsstandard": {
    "ignore": [
      "dist",
      "dist-test",
      "docs",
      "es5",
      "test/karma",
      "scripts",
      "utils",
      "test/test-manifests.js",
      "test/test-expected.js"
    ]
  },
  "files": [
    "CONTRIBUTING.md",
    "dist/",
    "docs/",
    "es5/",
    "index.html",
    "scripts/",
    "src/",
    "test/"
  ],
  "dependencies": {
    "m3u8-parser": "^1.0.2",
    "aes-decrypter": "^1.0.3",
    "video.js": "^5.10.1",
    "videojs-contrib-media-sources": "^3.1.0",
    "videojs-swf": "^5.0.2",
    "global": "^4.3.0"
  },
  "devDependencies": {
    "babel": "^5.8.0",
    "babelify": "^6.0.0",
    "bannerize": "^1.0.0",
    "browserify": "^11.0.0",
    "browserify-shim": "^3.0.0",
    "connect": "^3.4.0",
    "cowsay": "^1.1.0",
    "d3": "3.4.8",
    "doctoc": "^0.15.0",
    "glob": "^6.0.3",
    "jsdoc": "^3.4.0",
    "karma": "^0.13.0",
    "karma-browserify": "^4.4.0",
    "karma-chrome-launcher": "^0.2.0",
    "karma-detect-browsers": "^2.0.0",
    "karma-firefox-launcher": "^0.1.0",
    "karma-ie-launcher": "^0.2.0",
    "karma-qunit": "^0.1.9",
    "karma-safari-launcher": "^0.1.0",
    "lodash-compat": "^3.10.0",
    "minimist": "^1.2.0",
    "nodemon": "^1.9.1",
    "npm-run-all": "^1.2.0",
    "portscanner": "^1.0.0",
    "qunitjs": "^1.18.0",
    "serve-static": "^1.10.0",
    "shelljs": "^0.5.3",
    "sinon": "1.10.2",
    "uglify-js": "^2.5.0",
    "videojs-standard": "^4.0.3",
    "watchify": "^3.6.0"
  },
  "readme": "# video.js HLS Source Handler\n\nPlay back HLS with video.js, even where it's not natively supported.\n\n[![Build Status](https://travis-ci.org/videojs/videojs-contrib-hls.svg?branch=master)](https://travis-ci.org/videojs/videojs-contrib-hls)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n**Table of Contents**  *generated with [DocToc](https://github.com/thlorenz/doctoc)*\n\n- [Installation](#installation)\n  - [NPM](#npm)\n  - [CDN](#cdn)\n  - [Releases](#releases)\n  - [Manual Build](#manual-build)\n- [Contributing](#contributing)\n- [Getting Started](#getting-started)\n- [Known Issues](#known-issues)\n  - [IE11](#ie11)\n- [Documentation](#documentation)\n  - [Options](#options)\n    - [How to use](#how-to-use)\n      - [Initialization](#initialization)\n      - [Source](#source)\n    - [List](#list)\n      - [withCredentials](#withcredentials)\n      - [useCueTags](#usecuetags)\n  - [Runtime Properties](#runtime-properties)\n    - [hls.playlists.master](#hlsplaylistsmaster)\n    - [hls.playlists.media](#hlsplaylistsmedia)\n    - [hls.segmentXhrTime](#hlssegmentxhrtime)\n    - [hls.bandwidth](#hlsbandwidth)\n    - [hls.bytesReceived](#hlsbytesreceived)\n    - [hls.selectPlaylist](#hlsselectplaylist)\n    - [hls.representations](#hlsrepresentations)\n    - [hls.xhr](#hlsxhr)\n  - [Events](#events)\n    - [loadedmetadata](#loadedmetadata)\n    - [loadedplaylist](#loadedplaylist)\n    - [mediachange](#mediachange)\n  - [In-Band Metadata](#in-band-metadata)\n- [Hosting Considerations](#hosting-considerations)\n  - [Testing](#testing)\n- [Release History](#release-history)\n- [Building](#building)\n- [Development](#development)\n  - [Tools](#tools)\n  - [Commands](#commands)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Installation\n### NPM\nTo install `videojs-contrib-hls` with npm run\n\n```bash\nnpm install --save videojs-contrib-hls\n```\n\n### CDN\nSelect a version of HLS from the [CDN](https://cdnjs.com/libraries/videojs-contrib-hls)\n\n### Releases\nDownload a release of [videojs-contrib-hls](https://github.com/videojs/videojs-contrib-hls/releases)\n\n### Manual Build\nDownload a copy of this git repository and then follow the steps in [Building](#building)\n\n## Contributing\nSee [CONTRIBUTING.md](/CONTRIBUTING.md)\n\n## Getting Started\nGet a copy of [videojs-contrib-hls](#installation) and include it in your page along with video.js:\n\n```html\n<video id=example-video width=600 height=300 class=\"video-js vjs-default-skin\" controls>\n  <source\n     src=\"https://example.com/index.m3u8\"\n     type=\"application/x-mpegURL\">\n</video>\n<script src=\"video.js\"></script>\n<script src=\"videojs-contrib-hls.min.js\"></script>\n<script>\nvar player = videojs('example-video');\nplayer.play();\n</script>\n```\n\nCheck out our [live example](http://jsbin.com/liwecukasi/edit?html,output) if you're having trouble.\n\n## Known Issues\nIssues that are currenty know about with workarounds. If you want to\nhelp find a solution that would be appreciated!\n\n### IE11\nIn some IE11 setups there are issues working with it's native HTML\nSourceBuffers functionality. This leads to various issues, such as\nvideos stopping playback with media decode errors. The known workaround\nfor this issues is to force the player to use flash when running on IE11.\n\n## Documentation\n[HTTP Live Streaming](https://developer.apple.com/streaming/) (HLS) has\nbecome a de-facto standard for streaming video on mobile devices\nthanks to its native support on iOS and Android. There are a number of\nreasons independent of platform to recommend the format, though:\n\n- Supports (client-driven) adaptive bitrate selection\n- Delivered over standard HTTP ports\n- Simple, text-based manifest format\n- No proprietary streaming servers required\n\nUnfortunately, all the major desktop browsers except for Safari are\nmissing HLS support. That leaves web developers in the unfortunate\nposition of having to maintain alternate renditions of the same video\nand potentially having to forego HTML-based video entirely to provide\nthe best desktop viewing experience.\n\nThis project addresses that situation by providing a polyfill for HLS\non browsers that have support for [Media Source\nExtensions](http://caniuse.com/#feat=mediasource), or failing that,\nsupport Flash. You can deploy a single HLS stream, code against the\nregular HTML5 video APIs, and create a fast, high-quality video\nexperience across all the big web device categories.\n\nCheck out the [full documentation](docs/) for details on how HLS works\nand advanced configuration. A description of the [adaptive switching\nbehavior](docs/bitrate-switching.md) is available, too.\n\nvideojs-contrib-hls support a bunch of HLS v2 and v3 features. Here\nare some highlights:\n\n- video-on-demand and live playback modes\n- backup or redundant streams\n- mid-segment quality switching\n- AES-128 segment encryption\n- CEA-608 captions are automatically translated into standard HTML5\n  [caption text tracks][0]\n- Timed ID3 Metadata is automatically translated into HTML5 metedata\n  text tracks\n- Highly customizable adaptive bitrate selection\n- Automatic bandwidth tracking\n- Cross-domain credentials support with CORS\n- Tight integration with video.js and a philosophy of exposing as much\n  as possible with standard HTML APIs\n- Stream with multiple audio tracks and switching to those audio tracks\n  (see the docs folder) for info\n\n[0]: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track\n\n### Options\n#### How to use\n\n##### Initialization\nYou may pass in an options object to the hls source handler at player\ninitialization. You can pass in options just like you would for other\nparts of video.js:\n\n```javascript\n// html5 for html hls\nvideojs(video, {html5: {\n  hls: {\n    withCredentials: true\n  }\n}});\n\n// or\n\n// flash for flash hls\nvideojs(video, {flash: {\n  hls: {\n    withCredentials: true\n  }\n}});\n\n// or\n\nvar options = {hls: {\n  withCredentials: true;\n}};\n\nvideojs(video, {flash: options, html5: options});\n\n```\n\n##### Source\nSome options, such as `withCredentials` can be passed in to hls during\n`player.src`\n\n```javascript\n\nvar player = videojs('some-video-id');\n\nplayer.src({\n  src: \"http://solutions.brightcove.com/jwhisenant/hls/apple/bipbop/bipbopall.m3u8\",\n  type: 'application/x-mpegURL',\n  withCredentials: true\n});\n```\n\n#### List\n##### withCredentials\n* Type: `boolean`\n* can be used as a source option\n* can be used as an initialization option\n\nWhen the `withCredentials` property is set to `true`, all XHR requests for\nmanifests and segments would have `withCredentials` set to `true` as well. This\nenables storing and passing cookies from the server that the manifests and\nsegments live on. This has some implications on CORS because when set, the\n`Access-Control-Allow-Origin` header cannot be set to `*`, also, the response\nheaders require the addition of `Access-Control-Allow-Credentials` header which\nis set to `true`.\nSee html5rocks's [article](http://www.html5rocks.com/en/tutorials/cors/)\nfor more info.\n\n##### useCueTags\n* Type: `boolean`\n* can be used as an initialization option\n\nWhen the `useCueTags` property is set to `true,` a text track is created with\nlabel 'hls-segment-metadata' and kind 'metadata'. The track is then added to\n`player.textTracks()`. Whenever a segment associated with a cue tag is playing,\nthe cue tags will be listed as a properties inside of a stringified JSON object\nunder its active cue's `text` property. The properties that are currently\nsupported are cueOut, cueOutCont, and cueIn. Changes in active cue may be\ntracked by following the Video.js cue points API for text tracks. For example:\n\n```javascript\nlet textTracks = player.textTracks();\nlet cuesTrack;\n\nfor (let i = 0; i < textTracks.length; i++) {\n  if (textTracks[i].label === 'hls-segment-metadata') {\n    cuesTrack = textTracks[i];\n  }\n}\n\ncuesTrack.addEventListener('cuechange', function() {\n  let activeCues = cuesTrack.activeCues;\n\n  for (let i = 0; i < activeCues.length; i++) {\n    let activeCue = activeCues[i];\n    let cueData = JSON.parse(activeCue.text);\n\n    console.log('Cue runs from ' + activeCue.startTime +\n                ' to ' + activeCue.endTime +\n                ' with cue tag contents ' +\n                (cueData.cueOut || cueData.cueOutCont || cueData.cueIn));\n  }\n});\n```\n\n### Runtime Properties\nRuntime properties are attached to the tech object when HLS is in\nuse. You can get a reference to the HLS source handler like this:\n\n```javascript\nvar hls = player.tech({ IWillNotUseThisInPlugins: true }).hls;\n```\n\nIf you *were* thinking about modifying runtime properties in a\nvideo.js plugin, we'd recommend you avoid it. Your plugin won't work\nwith videos that don't use videojs-contrib-hls and the best plugins\nwork across all the media types that video.js supports. If you're\ndeploying videojs-contrib-hls on your own website and want to make a\ncouple tweaks though, go for it!\n\n#### hls.playlists.master\nType: `object`\n\nAn object representing the parsed master playlist. If a media playlist\nis loaded directly, a master playlist with only one entry will be\ncreated.\n\n#### hls.playlists.media\nType: `function`\n\nA function that can be used to retrieve or modify the currently active\nmedia playlist. The active media playlist is referred to when\nadditional video data needs to be downloaded. Calling this function\nwith no arguments returns the parsed playlist object for the active\nmedia playlist. Calling this function with a playlist object from the\nmaster playlist or a URI string as specified in the master playlist\nwill kick off an asynchronous load of the specified media\nplaylist. Once it has been retreived, it will become the active media\nplaylist.\n\n#### hls.segmentXhrTime\nType: `number`\n\nThe number of milliseconds it took to download the last media segment.\nThis value is updated after each segment download completes.\n\n#### hls.bandwidth\nType: `number`\n\nThe number of bits downloaded per second in the last segment download.\nThis value is used by the default implementation of `selectPlaylist`\nto select an appropriate bitrate to play.\n\nBefore the first video segment has been downloaded, it's hard to\nestimate bandwidth accurately. The HLS tech uses a heuristic based on\nthe playlist download times to do this estimation by default. If you\nhave a more accurate source of bandwidth information, you can override\nthis value as soon as the HLS tech has loaded to provide an initial\nbandwidth estimate.\n\n#### hls.bytesReceived\nType: `number`\n\nThe total number of content bytes downloaded by the HLS tech.\n\n#### hls.selectPlaylist\nType: `function`\n\nA function that returns the media playlist object to use to download\nthe next segment. It is invoked by the tech immediately before a new\nsegment is downloaded. You can override this function to provide your\nadaptive streaming logic. You must, however, be sure to return a valid\nmedia playlist object that is present in `player.hls.master`.\n\nOverridding this function with your own is very powerful but is overkill\nfor many purposes. Most of the time, you should use the much simpler\nfunction below to selectively enable or disable a playlist from the\nadaptive streaming logic.\n\n#### hls.representations\nType: `function`\n\nTo get all of the available representations, call the `representations()` method on `player.hls`. This will return a list of plain objects, each with `width`, `height`, `bandwidth`, and `id` properties, and an `enabled()` method.\n\n```javascript\nplayer.hls.representations();\n```\n\nTo see whether the representation is enabled or disabled, call its `enabled()` method with no arguments. To set whether it is enabled/disabled, call its `enabled()` method and pass in a boolean value. Calling `<representation>.enabled(true)` will allow the adaptive bitrate algorithm to select the representation while calling `<representation>.enabled(false)` will disallow any selection of that representation.\n\nExample, only enabling representations with a width greater than or equal to 720:\n\n```javascript\nplayer.hls.representations().forEach(function(rep) {\n  if (rep.width >= 720) {\n    rep.enabled(true);\n  } else {\n    rep.enabled(false);\n  }\n});\n```\n\n#### hls.xhr\nType: `function`\n\nThe xhr function that is used by HLS internally is exposed on the per-\nplayer `hls` object. While it is possible, we do not recommend replacing\nthe function with your own implementation. Instead, the `xhr` provides\nthe ability to specify a `beforeRequest` function that will be called\nwith an object containing the options that will be used to create the\nxhr request.\n\nExample:\n```javascript\nplayer.hls.xhr.beforeRequest = function(options) {\n  options.uri = options.uri.replace('example.com', 'foo.com');\n\n  return options;\n};\n```\n\nThe global `videojs.Hls` also exposes an `xhr` property. Specifying a\n`beforeRequest` function on that will allow you to intercept the options\nfor *all* requests in every player on a page.\n\nExample\n```javascript\nvideojs.Hls.xhr.beforeRequest = function(options) {\n  /*\n   * Modifications to requests that will affect every player.\n   */\n\n  return options;\n};\n```\n\nFor information on the type of options that you can modify see the\ndocumentation at [https://github.com/Raynos/xhr](https://github.com/Raynos/xhr).\n\n### Events\nStandard HTML video events are handled by video.js automatically and\nare triggered on the player object. In addition, there are a couple\nspecialized events you can listen to on the HLS object during\nplayback:\n\n#### loadedmetadata\n\nFired after the first segment is downloaded for a playlist. This will not happen\nuntil playback if video.js's `metadata` setting is `none`\n\n#### loadedplaylist\n\nFired immediately after a new master or media playlist has been\ndownloaded. By default, the tech only downloads playlists as they\nare needed.\n\n#### mediachange\n\nFired when a new playlist becomes the active media playlist. Note that\nthe actual rendering quality change does not occur simultaneously with\nthis event; a new segment must be requested and the existing buffer\ndepleted first.\n\n### In-Band Metadata\nThe HLS tech supports [timed\nmetadata](https://developer.apple.com/library/ios/#documentation/AudioVideo/Conceptual/HTTP_Live_Streaming_Metadata_Spec/Introduction/Introduction.html)\nembedded as [ID3 tags](http://id3.org/id3v2.3.0). When a stream is\nencountered with embedded metadata, an [in-band metadata text\ntrack](https://html.spec.whatwg.org/multipage/embedded-content.html#text-track-in-band-metadata-track-dispatch-type)\nwill automatically be created and populated with cues as they are\nencountered in the stream. UTF-8 encoded\n[TXXX](http://id3.org/id3v2.3.0#User_defined_text_information_frame)\nand [WXXX](http://id3.org/id3v2.3.0#User_defined_URL_link_frame) ID3\nframes are mapped to cue points and their values set as the cue\ntext. Cues are created for all other frame types and the data is\nattached to the generated cue:\n\n```javascript\ncue.value.data\n```\n\nThere are lots of guides and references to using text tracks [around\nthe web](http://www.html5rocks.com/en/tutorials/track/basics/).\n\n## Hosting Considerations\nUnlike a native HLS implementation, the HLS tech has to comply with\nthe browser's security policies. That means that all the files that\nmake up the stream must be served from the same domain as the page\nhosting the video player or from a server that has appropriate [CORS\nheaders](https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS)\nconfigured. Easy [instructions are\navailable](http://enable-cors.org/server.html) for popular webservers\nand most CDNs should have no trouble turning CORS on for your account.\n\n### Testing\n\nFor testing, you run `npm run test`. This will run tests using any of the\nbrowsers that karma-detect-browsers detects on your machine.\n\n## Release History\nCheck out the [changelog](CHANGELOG.md) for a summary of each release.\n\n## Building\nTo build a copy of videojs-contrib-hls run the following commands\n\n```bash\ngit clone https://github.com/videojs/videojs-contrib-hls\ncd videojs-contrib-hls\nnpm i\nnpm run build\n```\n\nvideojs-contrib-hls will have created all of the files for using it in a dist folder\n\n## Development\n\n### Tools\n* Download stream locally with the [HLS Fetcher](https://github.com/imbcmdth/hls-fetcher)\n* Simulate errors with [Murphy](https://github.com/mrocajr/murphy)\n\n### Commands\nAll commands for development are listed in the `package.json` file and are run using\n```bash\nnpm run <command>\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/videojs/videojs-contrib-hls/issues"
  },
  "_id": "videojs-contrib-hls@3.4.0",
  "dist": {
    "shasum": "8381bf67b14b7b4d7aa835fec6d6a4bd72f019f8"
  },
  "_from": "videojs-contrib-hls@",
  "_resolved": "https://registry.npmjs.org/videojs-contrib-hls/-/videojs-contrib-hls-3.4.0.tgz"
}
